---------
Recursion
---------
class Solution {
    public int climbStairs(int n) {
        if(n<=1) return 1;
        return climbStairs(n-1) + climbStairs(n-2);
    }
}

-----------
Memoization
-----------
class Solution {
    int[] DP;
    public int climbStairs(int n) {
        DP = new int[n+1];
        Arrays.fill(DP,-1);
        return solve(n);
    }
    public int solve(int n){
        if(n<=1) return 1;
        if(DP[n] != -1) return DP[n];
        return DP[n] = solve(n-1) + solve(n-2);
    }
}

----------
Tabulation
----------
class Solution {
    int[] DP;
    public int climbStairs(int n) {
        DP = new int[n+1];
        Arrays.fill(DP,-1);
        return solve(n);
    }
    public int solve(int n){
        if(n<=1) return 1;
        DP[0] = 1;
        DP[1] = 1;
        for(int i=2;i<=n;i++){
            DP[i] = DP[i-1] + DP[i-2];
        }
        return DP[n];
    }
}

------------------
Space Optimization
------------------
class Solution {
    public int climbStairs(int n) {
        return solve(n);
    }
    public int solve(int n){
        if(n<=1) return 1;
        int prev = 1;
        int curr = 1;
        for(int i=2;i<=n;i++){
            int next = curr + prev;
            prev = curr;
            curr = next;
        }
        return curr;
    }
}
