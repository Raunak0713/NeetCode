// import java.util.Arrays;

class Solution {
    int[] DP;

    public int rob(int[] nums) {
        int n = nums.length;
        if (n == 1) return nums[0];  // Edge case: only one house

        // Scenario 1: Rob houses from index 0 to n-2
        DP = new int[n];
        Arrays.fill(DP, -1);
        int a = solve(nums, 0, n - 2);

        // Scenario 2: Rob houses from index 1 to n-1
        DP = new int[n];
        Arrays.fill(DP, -1);
        int b = solve(nums, 1, n - 1);

        // Return the maximum of the two scenarios
        return Math.max(a, b);
    }

    public int solve(int[] nums, int s, int e) {
        if (s == e) return nums[s];
        if (e - s == 1) return Math.max(nums[s], nums[e]);

        DP[s] = nums[s];
        DP[s + 1] = Math.max(nums[s], nums[s + 1]);

        for (int i = s + 2; i <= e; i++) {
            DP[i] = Math.max(nums[i] + DP[i - 2], DP[i - 1]);
        }

        return DP[e];
    }
}
