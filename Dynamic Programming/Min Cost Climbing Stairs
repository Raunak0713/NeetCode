---------
Recursive
---------
class Solution {
    public int minCostClimbingStairs(int[] cost) {
        return Math.min(FindCost(cost,0),FindCost(cost,1));
    }
    public int FindCost(int[] cost,int index){
        if(index >= cost.length) return 0;
        return cost[index] + Math.min(FindCost(cost,index+1),FindCost(cost,index+2));
    }
}

-----------
Memoization
-----------
class Solution {
    int[] DP;
    public int minCostClimbingStairs(int[] cost) {
        DP = new int[cost.length+1];
        Arrays.fill(DP,-1);
        return Math.min(FindCost(cost,0),FindCost(cost,1));
    }
    public int FindCost(int[] cost,int index){
        if(index >= cost.length) return 0;
        if(DP[index] != -1) return DP[index];
        return DP[index] = cost[index] + Math.min(FindCost(cost,index+1),FindCost(cost,index+2));
    }
}

----------
Tabulation
----------
class Solution {
    public int minCostClimbingStairs(int[] cost) {
        return Math.min(FindCost(cost,0),FindCost(cost,1));
    }
    public int FindCost(int[] cost,int index){
        int n = cost.length;
        if(n==2) return Math.min(cost[0],cost[1]);
        for(int i=2;i<n;i++){
            cost[i] += Math.min(cost[i-1],cost[i-2]);
        }
        return Math.min(cost[n-1],cost[n-2]);
    }
}

------------------
Space Optimization
------------------
class Solution {
    public int minCostClimbingStairs(int[] cost) {
        return Math.min(FindCost(cost,0),FindCost(cost,1));
    }
    public int FindCost(int[] cost,int index){
        int n = cost.length;
        int first = cost[0];
        int second = cost[1];
        if (n<=2) return Math.min(first, second);
        for (int i=2; i<n; i++) {
            int curr = cost[i] + Math.min(first, second);
            first = second;
            second = curr;
        }
        return Math.min(first, second);
    }
}

